# .github/workflows/pages.yml
name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm (and fix PATH)
        shell: bash
        run: |
          npm i -g pnpm@9.12.1
          echo "$(npm config get prefix)/bin" >> "$GITHUB_PATH"
          pnpm -v

      - name: Use dedicated pnpm store
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # build/refresh data if you need to
      # - name: Fetch rosters
      #   env:
      #     BALLDONTLIE_API_KEY: ${{ secrets.BALLDONTLIE_API_KEY }}
      #     DATA_TTL_HOURS: 6
      #   run: pnpm run fetch:rosters

      - name: Build
        run: pnpm run build

      # --- pick the deploy dir automatically ---
      - name: Pick deploy dir
        id: pickdir
        shell: bash
        run: |
          set -euo pipefail
          if [ -f public/index.html ]; then
            echo "dir=public" >> "$GITHUB_OUTPUT"
          elif [ -f index.html ]; then
            echo "dir=." >> "$GITHUB_OUTPUT"
          else
            echo "No index.html found in repo root or public/"; ls -la; exit 1
          fi
          echo "Deploying from: $(cat "$GITHUB_OUTPUT" | cut -d= -f2)"

      - name: List deploy files
        run: |
          echo "Listing ${{ steps.pickdir.outputs.dir }}"
          ls -la ${{ steps.pickdir.outputs.dir }} | sed -n '1,200p'

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.pickdir.outputs.dir }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
